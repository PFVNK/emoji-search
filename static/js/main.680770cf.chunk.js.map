{"version":3,"sources":["components/Search.js","components/List.js","App.js","reportWebVitals.js","index.js"],"names":["Search","setSearch","search","className","type","value","onChange","e","target","List","emojis","filteredEmojis","map","emoji","unicodeName","split","useEffect","console","log","item","character","charAt","toUpperCase","slice","App","useState","setEmojis","url","a","length","fetch","then","response","json","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAyBeA,MAvBf,YAGI,IAFFC,EAEC,EAFDA,UACAC,EACC,EADDA,OAOA,OACE,qBAAKC,UAAU,mBAAf,SACE,sBAAKA,UAAU,eAAf,UACE,wEACA,uBAAOA,UAAU,eACfC,KAAK,OACLC,MAAOH,EACPI,SAXa,SAAAC,GACnBN,EAAUM,EAAEC,OAAOH,gBCqBRI,MA3Bf,YAEI,IADFC,EACC,EADDA,OAIIC,EAAiBD,EAAOE,KAAI,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,MAAM,OAWjE,OAJAC,qBAAU,WACRC,QAAQC,IAAIP,MAIZ,qBAAKR,UAAU,iBAAf,SACE,oBAAIA,UAAU,aAAd,SACGO,GAAUA,EAAOE,KAAI,SAAAO,GAAI,OACxB,qBAAIhB,UAAU,YAAd,UAA0B,sBAAMA,UAAU,QAAhB,SAAyBgB,EAAKC,YAAiB,sBAAMjB,UAAU,cAAhB,SAA+BgB,EAAKL,YAAYO,OAAO,GAAGC,cAAgBH,EAAKL,YAAYS,MAAM,gBCgBrKC,MAhCf,WACE,MAA4BC,mBAAS,IAArC,mBAAOvB,EAAP,KAAeD,EAAf,KACA,EAA4BwB,mBAAS,IAArC,mBAAOf,EAAP,KAAegB,EAAf,KAEIC,EAAG,8CAA0CzB,EAA1C,wDAeP,OAbAc,oBAAS,sBAAC,sBAAAY,EAAA,sDACJ1B,EAAO2B,QACTC,MAAMH,GACHI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIR,EAAUQ,MAJpB,2CAMP,CAAChC,IAEJc,qBAAU,eAMR,sBAAKb,UAAU,MAAf,UACE,cAAC,EAAD,CACEF,UAAWA,EACXC,OAAQA,IAEV,cAAC,EAAD,CACEQ,OAAQA,QCpBDyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.680770cf.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Search({\n  setSearch,\n  search\n}) {\n\n  const handleChange = e => {\n    setSearch(e.target.value)\n  }\n\n  return (\n    <div className='search-container'>\n      <div className='search-inner'>\n        <h1>ðŸ˜º EMOJI SEARCH ðŸ˜¾</h1>\n        <input className='search-input'\n          type=\"text\"\n          value={search}\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Search\n","import { useEffect } from 'react'\n\nfunction List({\n  emojis\n}) {\n\n  let noNum = []\n  let filteredEmojis = emojis.map(emoji => emoji.unicodeName.split(''))\n\n  // for (let i = 0; i < filteredEmojis.length; i++) {\n  //   let title = filteredEmojis[i]\n  //   console.log(title)\n  // }\n\n  useEffect(() => {\n    console.log(filteredEmojis)\n  })\n\n  return (\n    <div className='list-container'>\n      <ul className='list-inner'>\n        {emojis && emojis.map(item =>\n          <li className='list-item'><span className='emoji'>{item.character}</span><span className='emoji-title'>{item.unicodeName.charAt(0).toUpperCase() + item.unicodeName.slice(1)}</span></li>\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default List\n","import { useState, useEffect } from 'react'\nimport './App.css';\n\nimport Search from './components/Search'\nimport List from './components/List'\n\nfunction App() {\n  const [search, setSearch] = useState('')\n  const [emojis, setEmojis] = useState([])\n\n  let url = `https://emoji-api.com/emojis?search=${search}&access_key=24deeed82b2527eeb42354b226b82ce37900f8bb`\n\n  useEffect(async () => {\n    if (search.length) {\n      fetch(url)\n        .then(response => response.json())\n        .then(data => setEmojis(data));\n    }\n  }, [search])\n\n  useEffect(() => {\n    // console.log(emojis)\n    // console.log(search)\n  })\n\n  return (\n    <div className=\"App\">\n      <Search\n        setSearch={setSearch}\n        search={search}\n      />\n      <List\n        emojis={emojis}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}